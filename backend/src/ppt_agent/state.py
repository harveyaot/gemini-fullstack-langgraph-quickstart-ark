from __future__ import annotations

from typing import TypedDict, Optional, Dict, Any, List
from typing_extensions import Annotated

import operator


def combine_messages(current: List[Dict[str, Any]], update: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Combine current messages with new messages"""
    if current is None:
        return update or []
    if update is None:
        return current
    return current + update


class PPTOverallState(TypedDict):
    """Main state for PPT agent workflow - used for overall state management and all outputs"""
    messages: Annotated[List[Dict[str, Any]], combine_messages]  # Plain dict messages with custom reducer
    # Routing and coordination fields
    next_tool: Optional[str]
    tool_args: Optional[Dict[str, Any]]
    current_tool_call: Optional[Any]
    # Shared data across nodes
    ppt_outline: Optional[Dict[str, Any]]  # Generated by outline node, used by HTML node
    # Research round control
    research_round_count: Annotated[int, operator.add]  # Tracks consecutive web search rounds
    max_research_rounds: Optional[int]  # Maximum allowed consecutive web searches


# Very Specific Input States - Each node gets exactly what it needs
class CoordinatorInputState(TypedDict):
    """Input state for coordinator node - analyzes full conversation"""
    messages: List[Dict[str, Any]]  # Plain dict messages


class WebSearchInputState(TypedDict):
    """Input state for web search node - only needs search queries"""
    queries: List[str]  # From PPTLLMTools.WebSearch.queries
    tool_call_id: Optional[str]  # Tool call ID for response


class OutlineInputState(TypedDict):
    """Input state for outline generation node - needs user request and reference documents"""
    user_request: str  # From PPTLLMTools.GenPptOutline.user_request
    ref_documents: str  # Extracted from conversation tool messages
    tool_call_id: Optional[str]  # Tool call ID for response


class HtmlInputState(TypedDict):
    """Input state for HTML generation node - needs outline and user request"""
    user_request: str  # From PPTLLMTools.GenPptHtml.user_request
    ppt_outline: Dict[str, Any]  # From previous outline generation
    theme: Optional[str]  # From PPTLLMTools.GenPptHtml.theme (default: "professional")
    total_pages: Optional[int]  # From PPTLLMTools.GenPptHtml.total_pages (default: 10)
    tool_call_id: Optional[str]  # Tool call ID for response


class ModifyInputState(TypedDict):
    """Input state for HTML modification node - needs page and modifications"""
    page_number: int  # From PPTLLMTools.ModifyPptHtml.page_number
    modification_suggestions: str  # From PPTLLMTools.ModifyPptHtml.modification_suggestions
    tool_call_id: Optional[str]  # Tool call ID for response


class FinalizeInputState(TypedDict):
    """Input state for finalize response node - needs full conversation"""
    messages: List[Dict[str, Any]]  # Plain dict messages 